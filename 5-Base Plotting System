
title(main=”Ozone and Wind in New York City”)

| You got it!

|==================================== | 29%
| Now we’ll show you how to plot a simple two-dimensional scatterplot using the R function plot. We’ll show the relationship between
| Wind (x-axis) and Ozone (y-axis). We’ll use the function plot with those two arguments (Wind and Ozone, in that order). To save some
| typing, though, we’ll call the R command with using 2 arguments. The first argument of with will be airquality, the dataset
| containing Wind and Ozone; the second argument will be the call to plot. Doing this allows us to avoid using the longer notation,
| e.g., airquality$Wind. Try this now.

with(airquality,plot(Wind,Ozone))

| Nice work!

|====================================== | 30%
| Note that plot generated labels for the x and y axes but no title.

…

|======================================== | 32%
| Add one now with the R command title. Use the argument main set equal to the string “Ozone and Wind in New York City”. (You can use
| the up arrow to recover the command if you don’t want to type it.)

title(main=”Ozone and Wind in New York City”)

| You are really on a roll!

|========================================== | 33%
| The basic plotting parameters are documented in the R help page for the function par. You can use par to set parameters OR to find
| out what values are already set. To see just how much flexibility you have, run the R command length with the argument par() now.

par()
$xlog
[1] FALSE

$ylog
[1] FALSE

$adj
[1] 0.5

$ann
[1] TRUE

$ask
[1] FALSE

$bg
[1] “white”

$bty
[1] “o”

$cex
[1] 1

$cex.axis
[1] 1

$cex.lab
[1] 1

$cex.main
[1] 1.2

$cex.sub
[1] 1

$cin
[1] 0.15 0.20

$col
[1] “black”

$col.axis
[1] “black”

$col.lab
[1] “black”

$col.main
[1] “black”

$col.sub
[1] “black”

$cra
[1] 14.4 19.2

$crt
[1] 0

$csi
[1] 0.2

$cxy
[1] 0.8590766 7.8996989

$din
[1] 4.822917 6.406250

$err
[1] 0

$family
[1] “”

$fg
[1] “black”

$fig
[1] 0 1 0 1

$fin
[1] 4.822917 6.406250

$font
[1] 1

$font.axis
[1] 1

$font.lab
[1] 1

$font.main
[1] 2

$font.sub
[1] 1

$lab
[1] 5 5 7

$las
[1] 0

$lend
[1] “round”

$lheight
[1] 1

$ljoin
[1] “round”

$lmitre
[1] 10

$lty
[1] “solid”

$lwd
[1] 1

$mai
[1] 1.02 0.82 0.82 0.42

$mar
[1] 5.1 4.1 4.1 2.1

$mex
[1] 1

$mfcol
[1] 1 1

$mfg
[1] 1 1 1 1

$mfrow
[1] 1 1

$mgp
[1] 3 1 0

$mkh
[1] 0.001

$new
[1] FALSE

$oma
[1] 0 0 0 0

$omd
[1] 0 1 0 1

$omi
[1] 0 0 0 0

$page
[1] TRUE

$pch
[1] 1

$pin
[1] 3.582917 4.566250

$plt
[1] 0.1700216 0.9129158 0.1592195 0.8720000

$ps
[1] 12

$pty
[1] “m”

$smo
[1] 1

$srt
[1] 0

$tck
[1] NA

$tcl
[1] -0.5

$usr
[1] 0.94 21.46 -5.68 174.68

$xaxp
[1] 5 20 3

$xaxs
[1] “r”

$xaxt
[1] “s”

$xpd
[1] FALSE

$yaxp
[1] 0 150 3

$yaxs
[1] “r”

$yaxt
[1] “s”

$ylbias
[1] 0.2

| Not quite, but you’re learning! Try again. Or, type info() for more options.

length(par())
[1] 72

| Excellent job!

|============================================ | 35%
| So there are a boatload (72) of parameters that par() gives you access to. Run the R function names with par() as its argument to see
| what these parameters are.

names(par())
[1] “xlog” “ylog” “adj” “ann” “ask” “bg” “bty” “cex” “cex.axis” “cex.lab” “cex.main”
[12] “cex.sub” “cin” “col” “col.axis” “col.lab” “col.main” “col.sub” “cra” “crt” “csi” “cxy”
[23] “din” “err” “family” “fg” “fig” “fin” “font” “font.axis” “font.lab” “font.main” “font.sub”
[34] “lab” “las” “lend” “lheight” “ljoin” “lmitre” “lty” “lwd” “mai” “mar” “mex”
[45] “mfcol” “mfg” “mfrow” “mgp” “mkh” “new” “oma” “omd” “omi” “page” “pch”
[56] “pin” “plt” “ps” “pty” “smo” “srt” “tck” “tcl” “usr” “xaxp” “xaxs”
[67] “xaxt” “xpd” “yaxp” “yaxs” “yaxt” “ylbias”

| You are quite good my friend!

|============================================== | 36%
| Variety is the spice of life. You might recognize some of these such as col and lwd from previous swirl lessons. You can always run
| ?par to see what they do. For now, run the command par()$pin and see what you get.

par($pin)
Error: unexpected ‘$’ in “par($”
par()$pin
[1] 3.582917 4.566250

| That’s a job well done!

|================================================ | 38%
| Alternatively, you could have gotten the same result by running par(“pin”) or par(‘pin’)). What do you think these two numbers
| represent?

1: Plot dimensions in inches
2: A confidence interval
3: Coordinates of the center of the plot window
4: Random numbers

Selection: 1

| Keep up the great work!

|================================================== | 39%
| Now, run the command par(“fg”) or or par(‘fg’) or par()$fg and see what you get.

par(“fg”)
[1] “black”

| All that hard work is paying off!

|==================================================== | 41%
| It gave you a color, right? Since par()$fg specifies foreground color, what do you think par()$bg specifies?

1: Background color
2: blue-green
3: Beautiful color
4: Better color

Selection: 1

| Excellent job!

|===================================================== | 42%
| Many base plotting functions share a set of parameters. We’ll go through some of the more commonly used ones now. See if you can tell
| what they do from their names.

…

|======================================================= | 44%
| What do you think the graphical parameter pch controls?

1: pc help
2: point control height
3: picture characteristics
4: plot character

Selection:
Enter an item from the menu, or 0 to exit
Selection: 4

| Perseverance, that’s the answer.

|========================================================= | 45%
| The plot character default is the open circle, but it “can either be a single character or an integer code for one of a set of
| graphics symbols.” Run the command par(“pch”) to see the integer value of the default. When you need to, you can use R’s
| Documentation (?pch) to find what the other values mean.

par(“pch”)
[1] 1

| You’re the best!

|=========================================================== | 47%
| So 1 is the code for the open circle. What do you think the graphical parameters lty and lwd control respectively?

1: line type and width
2: line slope and intercept
3: line length and width
4: line width and type

Selection: 1

| All that practice is paying off!

|============================================================= | 48%
| Run the command par(“lty”) to see the default line type.

par(“lty”)
[1] “solid”

| You’re the best!

|=============================================================== | 50%
| So the default line type is solid, but it can be dashed, dotted, etc. Once again, R’s ?par documentation will tell you what other
| line types are available. The line width is a positive integer; the default value is 1.

…

|================================================================= | 52%
| We’ve seen a lot of examples of col, the plotting color, specified as a number, string, or hex code; the colors() function gives you
| a vector of colors by name.

…

|=================================================================== | 53%
| What do you think the graphical parameters xlab and ylab control respectively?

1: labels for the y- and x- axes
2: labels for the x- and y- axes

Selection: 2

| You’re the best!

|===================================================================== | 55%
| The par() function is used to specify global graphics parameters that affect all plots in an R session. (Use dev.off or plot.new to
| reset to the defaults.) These parameters can be overridden when specified as arguments to specific plotting functions. These include
| las (the orientation of the axis labels on the plot), bg (background color), mar (margin size), oma (outer margin size), mfrow and
| mfcol (number of plots per row, column).

…

|======================================================================= | 56%
| The last two, mfrow and mfcol, both deal with multiple plots in that they specify the number of plots per row and column. The
| difference between them is the order in which they fill the plot matrix. The call mfrow will fill the rows first while mfcol fills
| the columns first.

…

|========================================================================= | 58%
| So to reiterate, first call a basic plotting routine. For instance, plot makes a scatterplot or other type of plot depending on the
| class of the object being plotted.

…

|========================================================================== | 59%
| As we’ve seen, R provides several annotating functions. Which of the following is NOT one of them?

1: text
2: hist
3: lines
4: title
5: points

Selection: 2

| You nailed it! Good job!

|============================================================================ | 61%
| So you can add text, title, points, and lines to an existing plot. To add lines, you give a vector of x values and a corresponding
| vector of y values (or a 2-column matrix); the function lines just connects the dots. The function text adds text labels to a plot
| using specified x, y coordinates.

…

|============================================================================== | 62%
| The function title adds annotations. These include x- and y- axis labels, title, subtitle, and outer margin. Two other annotating
| functions are mtext which adds arbitrary text to either the outer or inner margins of the plot and axis which adds axis ticks and
| labels. Another useful function is legend which explains to the reader what the symbols your plot uses mean.

…

|================================================================================ | 64%
| Before we close, let’s test your ability to make a somewhat complicated scatterplot. First run plot with 3 arguments.
| airquality$Wind, airquality$Ozone, and type set equal to “n”. This tells R to set up the plot but not to put the data in it.


plot(airquality$Wind,airquality$Ozone,type=”n”)
There were 12 warnings (use warnings() to see them)

| You got it right!

|================================================================================== | 65%
| Now for the test. (You might need to check R’s documentation for some of these.) Add a title with the argument main set equal to the
| string “Wind and Ozone in NYC”

title(main=”Wind and Ozone in NYC”)

| All that hard work is paying off!

|==================================================================================== | 67%
| Now create a variable called may by subsetting airquality appropriately. (Recall that the data specifies months by number and May is
| the fifth month of the year.)

head(airquality)
Ozone Solar.R Wind Temp Month Day
1 41 190 7.4 67 5 1
2 36 118 8.0 72 5 2
3 12 149 12.6 74 5 3
4 18 313 11.5 62 5 4
5 NA NA 14.3 56 5 5
6 28 NA 14.9 66 5 6

may <- subset(airquality,Month==5)

| You are doing so well!

|====================================================================================== | 68%
| Now use the R command points to plot May’s wind and ozone (in that order) as solid blue triangles. You have to set the color and plot
| character with two separate arguments. Note we use points because we’re adding to an existing plot.

subset
function (x, …)
UseMethod(“subset”)

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| The code for solid blue trianges is 17 so typing points(may$Wind,may$Ozone,col=”blue”,pch=17) at the prompt should work.

?subset
points(may$Wind,may$Ozone,col=”blue”,pch=17)

| You nailed it! Good job!

|======================================================================================== | 70%
| Now create the variable notmay by subsetting airquality appropriately.

notmay <- subset(airquality,month!=5)
Error in eval(e, x, parent.frame()) : object ‘month’ not found
notmay <- subset(airquality,Month!=5)

| That’s the answer I was looking for.

|========================================================================================== | 71%
| Now use the R command points to plot these notmay’s wind and ozone (in that order) as red snowflakes.

points(notmay$Wind,notmay$Ozone,col=”red”,pch=8)

| Perseverance, that’s the answer.

|============================================================================================ | 73%
| Now we’ll use the R command legend to clarify the plot and explain what it means. The function has a lot of arguments, but we’ll only
| use 4. The first will be the string “topright” to tell R where to put the legend. The remaining 3 arguments will each be 2-long
| vectors created by R’s concatenate function, e.g., c(). These arguments are pch, col, and legend. The first is the vector (17,8), the
| second (“blue”,”red”), and the third (“May”,”Other Months”). Try it now.

legend(pch=c(17,8),col=c(“blue”,”red”),legend=c(“May”,”Other Months”),”topright”)

| Your dedication is inspiring!

|============================================================================================== | 74%
| Now add a vertical line at the median of airquality$Wind. Make it dashed (lty=2) with a width of 2.

abline(median(airquality$Wind),lty=2,lwd=2)
Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, …) :
invalid a=, b= specification
?abline
line(median(airquality$Wind),lty=2,lwd=2)
Error in line(median(airquality$Wind), lty = 2, lwd = 2) :
unused arguments (lty = 2, lwd = 2)
line(median(airquality$Wind),airquality$Ozone=0,lty=2,lwd=2)
Error: unexpected ‘=’ in “line(median(airquality$Wind),airquality$Ozone=”
line(median(airquality$Wind),airquality$Ozone,lty=2,lwd=2)
Error in line(median(airquality$Wind), airquality$Ozone, lty = 2, lwd = 2) :
unused arguments (lty = 2, lwd = 2)
line(v=median(airquality$Wind),lty=2,lwd=2)
Error in line(v = median(airquality$Wind), lty = 2, lwd = 2) :
unused arguments (v = median(airquality$Wind), lty = 2, lwd = 2)
abline(v=median(airquality$Wind),lty=2,lwd=2)

| Keep up the great work!

|=============================================================================================== | 76%
| Use par with the parameter mfrow set equal to the vector (1,2) to set up the plot window for two plots side by side. You won’t see a
| result.

par(mfrow=c(1,2))

| You got it!

|================================================================================================= | 77%
| Now plot airquality$Wind and airquality$Ozone and use main to specify the title “Ozone and Wind”.

plot(airquality$Wind,airquality$Ozone,main=”Ozone and Wind”)

| Nice work!

|=================================================================================================== | 79%
| Now for the second plot.

…

|===================================================================================================== | 80%
| Plot airquality$Ozone and airquality$Solar.R and use main to specify the title “Ozone and Solar Radiation”.

plot(airquality$Ozone,airquality$Solar.R,main=”Ozone and Solar Radiation”)

| You are quite good my friend!

|======================================================================================================= | 82%
| Now for something more challenging.

…

|========================================================================================================= | 83%
| This one with 3 plots, to illustrate inner and outer margins. First, set up the plot window by typing par(mfrow = c(1, 3), mar = c(4,
| 4, 2, 1), oma = c(0, 0, 2, 0))

par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))

| You’re the best!

|=========================================================================================================== | 85%
| Margins are specified as 4-long vectors of integers. Each number tells how many lines of text to leave at each side. The numbers are
| assigned clockwise starting at the bottom. The default for the inner margin is c(5.1, 4.1, 4.1, 2.1) so you can see we reduced each
| of these so we’ll have room for some outer text.

…

|============================================================================================================= | 86%
| The first plot should be familiar. Plot airquality$Wind and airquality$Ozone with the title (argument main) as “Ozone and Wind”.

plot(airquality$Wind,airquality$Ozone,main=”Ozone and Wind”)

| Your dedication is inspiring!

|=============================================================================================================== | 88%
| The second plot is similar.

…

|================================================================================================================= | 89%
| Plot airquality$Solar.R and airquality$Ozone with the title (argument main) as “Ozone and Solar Radiation”.

plot(airquality$Solar.R,airquality$Ozone,main=”Ozone and Solar Radiation”)

| That’s correct!

|=================================================================================================================== | 91%
| Now for the final panel.

…

|==================================================================================================================== | 92%
| Plot airquality$Temp and airquality$Ozone with the title (argument main) as “Ozone and Temperature”.

plot(airquality$Temp,airquality$Ozone,main=”Ozone and Temperature”)

| You got it!

|====================================================================================================================== | 94%
| Now we’ll put in a title.

…

|======================================================================================================================== | 95%
| Since this is the main title, we specify it with the R command mtext. Call mtext with the string “Ozone and Weather in New York City”
| and the argument outer set equal to TRUE.


mtext(“Ozone and Weather in New York City”,outer=TRUE)

| You’re the best!

|========================================================================================================================== | 97%
| Voila! Beautiful, right?

…

|============================================================================================================================ | 98%
| Congrats! You’ve weathered this lesson nicely and passed out of the No!zone.
